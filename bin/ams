#!/usr/bin/env ruby
THIS_FILE = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__
lib = File.expand_path('../../lib', THIS_FILE)
plugins= File.expand_path('../../lib/AnalyzeMySQL/plugins', THIS_FILE)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
$LOAD_PATH.unshift(plugins) unless $LOAD_PATH.include?(plugins)

require 'AnalyzeMySQL'
require 'optparse'
require 'fileutils'
require 'colorize'

options = {
    :config => File.expand_path('conf/config.yml', Dir.getwd)
}

OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [options]"
  opts.on('-i', '--init', 'Creates a new config.yml from an example file.') do |i|
    conf_file = File.expand_path('../../conf/config.yml', THIS_FILE)

    if Dir.exists? File.absolute_path(Dir.getwd, 'conf')
      puts 'Config folder already exists, skipping creation'.yellow
    else
      puts 'Creating config folder'.green
      Dir.mkdir(File.expand_path(Dir.getwd, 'conf'))
    end

    if File.exists? File.expand_path(Dir.getwd, 'conf/config.yml')
      puts 'Config file does already exist, skipping creation'.yellow
    else
      puts 'Copying sample config to current working directory...'.green
      FileUtils.cp(conf_file, File.expand_path(Dir.getwd, 'conf'))
    end
    exit
  end

  opts.on_tail('--version', 'Show version') do
    puts AnalyzeMySQL::VERSION
    exit
  end
end.parse!

if File.exists? File.expand_path(Dir.getwd, 'conf/config.yml')
  conf = AnalyzeMySQL::conf(options)
  AnalyzeMySQL::run(conf)
else
  puts 'No configuration found. You might want to run `ams --init` first'.red
end